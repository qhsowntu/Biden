<local:BaseWindow x:Class="Biden.View.FuncWindow1_Add"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Biden.View"
        xmlns:fa="http://schemas.fontawesome.io/icons/"    
        xmlns:ViewModel="clr-namespace:Biden.ViewModel" 
        mc:Ignorable="d"
        Title="FuncWindow1_Add" Width="430" Height="500" ResizeMode="NoResize" Background="Transparent"
                   WindowStyle="None" WindowStartupLocation="CenterScreen" AllowsTransparency="True" Topmost="True">
    <Window.DataContext>
        <ViewModel:ViewModelFunc1_Add/>
    </Window.DataContext>
    <Border Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}">
        <Border.OpacityMask>
            <VisualBrush>
                <VisualBrush.Visual>
                    <Border Background="Red"
                            SnapsToDevicePixels="True"
                            CornerRadius="10"
                            Width="{Binding ActualWidth,RelativeSource={RelativeSource FindAncestor, AncestorType=Border}}"
                            Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor,AncestorType=Border}}"/>
                </VisualBrush.Visual>
            </VisualBrush>
        </Border.OpacityMask>
        <Canvas x:Name="mainCanvas" MouseLeftButtonDown="OnMouseLeftDown" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}" Background="#FFE6EFF8">
            <Label Content="Add Rules" Height="32" Canvas.Left="14" Canvas.Top="5" Width="230" FontWeight="Bold" FontSize="16"/>
            <Button x:Name="closeButton" Content="X" Width="14" Height="14" Click="CloseButton_Click"  FontWeight="Bold" FontFamily="Corbel"
                BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" HorizontalAlignment="Right" VerticalAlignment="Top"  Canvas.Right ="5" Canvas.Top ="5" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0" Foreground="#FF4A4A4A" />
            <Button x:Name="maxButton" Content="ㅁ" Width="14" Height="14" Click="MaxButton_Click"  FontWeight="Bold" FontFamily="Corbel"
                BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" HorizontalAlignment="Right" VerticalAlignment="Top"  Canvas.Right ="19" Canvas.Top ="5" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0" Foreground="#FF4A4A4A"/>
            <Button x:Name="minButton" Content="―" Width="14" Height="14" Click="MinButton_Click"  FontWeight="Bold" FontFamily="Corbel"
                BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" HorizontalAlignment="Right" VerticalAlignment="Top"  Canvas.Right ="33" Canvas.Top ="5" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0" Foreground="#FF4A4A4A"/>
            <Button HorizontalAlignment="Left" x:Name="FuncBtn03_1" VerticalAlignment="Bottom"
                    Height="35" Width="180" BorderBrush="White" Canvas.Left="24" Canvas.Bottom="20" BorderThickness="0" SnapsToDevicePixels="True">
                <Button.Resources>
                    <Style TargetType="Border">
                        <Setter Property="CornerRadius" Value="10"/>
                    </Style>
                </Button.Resources>
                <Button.BitmapEffect>
                    <DropShadowBitmapEffect Color="Black" Direction="315" Softness="0.5" ShadowDepth="5" Opacity="0.4" />
                </Button.BitmapEffect>
            </Button>
            <Button HorizontalAlignment="Left" x:Name="FuncBtn03_1_Copy" VerticalAlignment="Bottom"
                Height="35" Width="180" BorderBrush="White" Canvas.Left="231" Canvas.Bottom="20" BorderThickness="0" SnapsToDevicePixels="True">
                <Button.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="10"/>
                    </Style>
                </Button.Resources>
                <Button.BitmapEffect>
                    <DropShadowBitmapEffect Color="Black" Direction="315" Softness="0.5" ShadowDepth="5" Opacity="0.4" />
                </Button.BitmapEffect>
            </Button>
            <Button Content="Ok" HorizontalAlignment="Left" VerticalAlignment="Bottom" Height="35" Width="180" Command="{Binding CmdFuncBtn01_AddOK}"
                    BorderThickness="0" SnapsToDevicePixels="True" BorderBrush="Transparent"
                    Panel.ZIndex="10" FontSize="20" FontWeight="Bold" Background="#FFE6EFF8" Foreground="Black" Canvas.Left="25" Canvas.Bottom="20">
                <Button.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="10"/>
                    </Style>
                </Button.Resources>
                <Button.BitmapEffect>
                    <DropShadowBitmapEffect Color="White" Direction="135" Softness="0.3" ShadowDepth="5" Opacity="0.6" />
                </Button.BitmapEffect>
            </Button>
            <Button Content="Cancel" HorizontalAlignment="Left" VerticalAlignment="Bottom" Height="35" Width="180" Command="{Binding CmdFuncBtn01_AddCancel}"
                BorderThickness="0" SnapsToDevicePixels="True" BorderBrush="Transparent"
                Panel.ZIndex="10" FontSize="20" FontWeight="Bold" Background="#FFE6EFF8" Foreground="Black" Canvas.Left="231" Canvas.Bottom="20">
                <Button.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="10"/>
                    </Style>
                </Button.Resources>
                <Button.BitmapEffect>
                    <DropShadowBitmapEffect Color="White" Direction="135" Softness="0.3" ShadowDepth="5" Opacity="0.6" />
                </Button.BitmapEffect>
            </Button>

            <Label Canvas.Left="22" Canvas.Top="61" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="Name"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="룰 이름을 넣어주세요"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Label Canvas.Left="22" Canvas.Top="101" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="Replace A with B"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="앞 칸의 문자열을 뒷 칸의 문자열로 변환합니다.&#xa;  ex) 앞 칸에 'a'  뒷 칸에 'b'를 넣은 경우, 'abc'는 'bbc'로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>

            <Label Canvas.Left="22" Canvas.Top="141" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="Prefix"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="기존 문자열의 앞에 추가됩니다.&#xa;  ex) 빈 칸에 'Input_'을 넣은 경우, 'signal'은 'Input_signal'로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Label Canvas.Left="22" Canvas.Top="181" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="Postfix"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="기존 문자열의 앞에 추가됩니다.&#xa;  ex) 빈 칸에 '_C'을 넣은 경우, 'signal'은 'signal_C'로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Label Content="→" Canvas.Left="260" Canvas.Top="100" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
            </Label>
            <Label Canvas.Left="22" Canvas.Top="221" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="Remove by Index"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="앞 칸의 숫자인덱스부터 뒷 칸의 숫자만큼 삭제합니다.&#xa;  ex) 앞 칸에 '3' 뒷 칸에 '2'를 넣은 경우, 'signal'은 'sigl' 로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Label Canvas.Left="22" Canvas.Top="261" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="Substring by Index"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="앞 칸의 숫자인덱스부터 뒷 칸의 숫자만큼 선택합니다.&#xa;  ex) 앞 칸에 '3' 뒷 칸에 '2'를 넣은 경우, 'signal'은 'na' 로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Label Canvas.Left="22" Canvas.Top="301" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="To Lower Case"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="소문자로 변환합니다.&#xa;  ex) 'Signal'은 'signal' 로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Label Canvas.Left="222" Canvas.Top="301" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="To Upper Case"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="대문자로 변환합니다.&#xa;  ex) 'Signal'은 'SIGNAL' 로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Label Canvas.Left="22" Canvas.Top="341" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="Trim"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="문자열 앞 뒤 공백을 제거합니다.&#xa;  ex) ' signal '은 'signal' 로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Label Canvas.Left="22" Canvas.Top="381" HorizontalAlignment="Center" VerticalAlignment="Top" Panel.ZIndex="101">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="#F0000000"/>
                        <Setter Property="Content" Value="Remove Space"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFFFFE99"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#F0000000"/>
                                <Setter Property="Content" Value="모든 공백을 제거합니다.&#xa;  ex) ' s i g n a l '은 'signal' 로 변환됨"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <TextBox Height="26" Canvas.Left="140" TextWrapping="Wrap" Text="{Binding nameStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="60" Width="260" BorderBrush="White" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <TextBox Height="26" Canvas.Left="140" TextWrapping="Wrap" Text="{Binding fromStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="100" Width="120" BorderBrush="White" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <TextBox Height="26" Canvas.Left="280" TextWrapping="Wrap" Text="{Binding toStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="100" Width="120" BorderBrush="White" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <TextBox Height="26" Canvas.Left="140" TextWrapping="Wrap" Text="{Binding prefixStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="140" Width="260" BorderBrush="White" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <TextBox Height="26" Canvas.Left="140" TextWrapping="Wrap" Text="{Binding postfixStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="180" Width="260" BorderBrush="White" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <Label Content="," Canvas.Left="262" Canvas.Top="226" HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="14" FontWeight="Bold"/>
            <TextBox Height="26" Canvas.Left="140" TextWrapping="Wrap" Text="{Binding fromStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="220" Width="120" BorderBrush="White" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <TextBox Height="26" Canvas.Left="280" TextWrapping="Wrap" Text="{Binding toStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="220" Width="120" BorderBrush="White" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <Label Content="," Canvas.Left="262" Canvas.Top="266" HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="14" FontWeight="Bold"/>
            <TextBox Height="26" Canvas.Left="140" TextWrapping="Wrap" Text="{Binding fromStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="260" Width="120" BorderBrush="White" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            <TextBox Height="26" Canvas.Left="280" TextWrapping="Wrap" Text="{Binding toStr, UpdateSourceTrigger=PropertyChanged}" Canvas.Top="260" Width="120" BorderBrush="White" HorizontalAlignment="Center" VerticalAlignment="Top" RenderTransformOrigin="0.457,2.09"/>
            <CheckBox Content="" Canvas.Left="140" Canvas.Top="309" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            <CheckBox Content="" Canvas.Left="340" Canvas.Top="309" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            <CheckBox Content="" Canvas.Left="140" Canvas.Top="349" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            <CheckBox Content="" Canvas.Left="140" Canvas.Top="389" HorizontalAlignment="Center" VerticalAlignment="Top"/>

        </Canvas>
    </Border>
</local:BaseWindow>
